@attribute("c-no-print")
import "libc/libc.hm"

@attribute("c-no-print")
import "libc/stdio.hm"

import "./core.hm"

/*
    0x00828103
    0x3e800093
    0x7d008113
    0xc1810193
    0x83018213
    0x3e820293
    0x003100b3
    0xfffff337
    0xfffff317
    0xfe5ff36f
    0x0ff100e7
    0xfe8086e3
    0xfe8094e3
    0xfe80c2e3
    0xfe80d0e3
    0xfc80eee3
    0xfc80fce3
    0x003110b3
    0x403100b3
    0x003120b3
    0x003130b3
    0x003150b3
    0x403150b3
    
*/

var instructions: [32]Nat32 = [
    0x000041b7
    0xc031819b
    0x01219193
    OP_STOP
]

func core_init(core: *Core, memctl: *MemoryInterface, text: *[]Nat32, textlen: Nat32, sp: Nat32) {
    memset(core, 0, sizeof(Core))
    core.memctl := memctl
    core.text := text
    core.textlen := textlen
    core.need_step := true
	core.reg[2] = sp to Int32
}


func extract_op(instr: Nat32) -> Nat8 {
    return (instr and 0x7F) to Nat8
}

func extract_funct3(instr: Nat32) -> Nat8 {
    return ((instr >> 12) and 0x07) to Nat8
}

func extract_rd(instr: Nat32) -> Nat8 {
    return ((instr >> 7) and 0x1F) to Nat8
}

func extract_rs1(instr: Nat32) -> Nat8 {
    return ((instr >> 15) and 0x1F) to Nat8
}

func extract_rs2(instr: Nat32) -> Nat8 {
    return ((instr >> 20) and 0x1F) to Nat8
}

func extract_funct7(instr: Nat32) -> Nat8 {
    return ((instr >> 25) and 0x7F) to Nat8
}

func extract_imm12(instr: Nat32) -> Int16 {
    var imm = ((instr >> 20) and 0xFFF) to Int16
    
    // распространяем знак
    if (imm and 0x800) == 0x800 {
        imm := imm or 0xF000
    }
    
    return imm
}

func extract_imm31_12(instr: Nat32) -> Int32 {
    var imm = ((instr >> 12) and 0xFFFFF) to Int32
    return imm
}


func expand12(val12bit: Nat16) -> Int16 {
    var v = val12bit
    if (v and 0x800) != 0 {
        v := v or 0xF000
    }
    return v to Int16
}

func expand20(val_20bit: Nat32) -> Int32 {
    var v = val_20bit
    if (v and 0x80000) != 0 {
        v := v or 0xFFF00000
    }
    return v to Int32
}


func i_type_op(core: *Core, instr: Nat32) {
    let funct3 = extract_funct3(instr)
    let funct7 = extract_funct7(instr)
    let imm = extract_imm12(instr) to Int32
    let rd = extract_rd(instr)
    let rs1 = extract_rs1(instr)
    
    //printf("funct7 = %x\n", instr and 0xff000000)
    
    if rd == 0 {return}
    
    //printf("RRI: funct7 = %d\n", funct7)
    
    if funct3 == 0 {
        printf("addi x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := core.reg[rs1] + imm
        
    } else if (funct3 == 1) and (funct7 == 0) {
        /* SLLI is a logical left shift (zeros are shifted
into the lower bits); SRLI is a logical right shift (zeros are shifted into the upper bits); and SRAI
is an arithmetic right shift (the original sign bit is copied into the vacated upper bits). */
        // TODO
        printf("slli x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := (core.reg[rs1] to Nat32 << imm) to Int32
    
    } else if funct3 == 2 {
        // SLTI - set [1 to rd if rs1] less than immediate
        printf("slti x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := (core.reg[rs1] < imm) to Int32
    
    } else if funct3 == 3 {
        printf("sltiu x%d, x%d, %d\n", rd, rs1, imm)
        
    } else if funct3 == 4 {
        printf("xori x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := core.reg[rs1] xor imm
    
    } else if (funct3 == 5) and (funct7 == 0) {
        // TODO
        printf("srli x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := (core.reg[rs1] to Nat32 >> imm) to Int32

    } else if (funct3 == 5) and (funct7 == 0x20) {
        // TODO
        printf("srai x%d, x%d, %d\n", rd, rs1, imm)

    } else if funct3 == 6 {
        printf("ori x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := core.reg[rs1] or imm

    } else if funct3 == 7 {
        printf("andi x%d, x%d, %d\n", rd, rs1, imm)
        core.reg[rd] := core.reg[rs1] xor imm
    }
}


func r_type_op(core: *Core, instr: Nat32) {
    let funct3 = extract_funct3(instr)
    let funct7 = extract_funct7(instr)
    let imm = extract_imm12(instr)
    let rd = extract_rd(instr)
    let rs1 = extract_rs1(instr)
    let rs2 = extract_rs2(instr)
    
    //printf("funct7 = %x\n", funct7)
    
    if rd == 0 {return}
    
    let v1 = core.reg[rs1]
    let v2 = core.reg[rs2]
    
    if funct3 == 0 and funct7 == 0x00 {
        printf("add x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 + v2
    } else if funct3 == 0 and funct7 == 0x20 {
        printf("sub x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 - v2
    } else if funct3 == 1 {
        // shift left logical
        printf("sll x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 << v2
    } else if funct3 == 2 {
        // set less than
        printf("slt x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := (v1 < v2) to Int32
    } else if funct3 == 3 {
        // set less than unsigned
        printf("sltu x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := (v1 to Nat32 < v2 to Nat32) to Int32
    } else if funct3 == 4 {
        printf("xor x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 xor v2
    } else if funct3 == 5 and funct7 == 0 {
        // shift right logical
        printf("srl x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := (v1 to Nat32 >> v2) to Int32
    } else if funct3 == 5 and funct7 == 0x20 {
        // TODO: shift right arithmetical
        printf("sra x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 >> v2
    } else if funct3 == 6 {
        printf("or x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 or v2
    } else if funct3 == 7 {
        printf("and x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] := v1 and v2
    }
}


func jal_imm_recode(imm: Nat32) -> Nat32 {
	let bit19to12_msk = (imm >> 0) and 0xFF
	let bit11_msk = (imm >> 8) and 0x1
	let bit10to1 = (imm >> 9) and 0x3FF
	let bit20_msk = (imm >> 20) and 0x1
	
	/*printf("bit10to1 = %x\n", bit10to1)
	printf("bit19to12_msk = %x\n", bit19to12_msk)
	printf("bit11_msk = %x\n", bit11_msk)
	printf("bit20_msk = %x\n", bit20_msk)*/
	
	let x = (bit20_msk << 20) or (bit19to12_msk << 12) or (bit11_msk << 11) or (bit10to1 << 1)
	
	return x
}



func fetch(core: *Core) -> Nat32 {
    let instr_adr = core.ip / 4
    let instr = core.text[instr_adr]
    return instr
}


var cnt : Nat32

func core_tick(core: *Core) -> Bool {
    let instr = fetch(core)
    let op = extract_op(instr)
    let rd = extract_rd(instr)
    let rs1 = extract_rs1(instr)
    let rs2 = extract_rs2(instr)
    let funct3 = extract_funct3(instr)
    
    if false {
        printf("INSTR = 0x%x\n", instr)
        printf("OP = 0x%x\n", op)
    }
    
    if op == OP_I {
        i_type_op(core, instr)
        
    } else if op == OP_R {
        r_type_op(core, instr)
    
    } else if op == OPCODE_LUI {
        // U-type
        let imm = extract_imm31_12(instr)
        printf("lui x%d, 0x%X\n", rd, imm)
        core.reg[rd] = imm << 12

    } else if op == OPCODE_AUI_PC {
        // U-type
        let imm = extract_imm31_12(instr)
        printf("auipc x%d, 0x%X\n", rd, imm)
        core.reg[rd] := ((core.ip to Int32) + imm << 12)
        printf("auipc:: core.reg[rd] = %x\n", core.reg[rd])
        
    } else if op == OPCODE_JAL {
        // U-type
		let raw_imm = jal_imm_recode(extract_imm31_12(instr) to Nat32)
		let imm = expand20(raw_imm)
		//jal_imm_recode(extract_imm31_12(instr) to Nat32)
		//let imm = jal_imm_recode(extract_imm31_12(instr) to Nat32)
		
		//printf("raw_imm = %x\n", raw_imm)
		//printf("imm = %d\n", imm)
		
        printf("jal x%d, %d\n", rd, imm)
		if rd != 0 {
			core.reg[rd] := (core.ip + 4) to Int32
		}
		core.ip := (core.ip to Int32 + imm) to Nat32
        core.need_step := false
	
    } else if op == OPCODE_JALR and funct3 == 0 {
        let imm = extract_imm12(instr)
        printf("jalr x%d, x%d, 0x%X\n", rd, rs1, imm)
    
    
    } else if op == OP_B {
        let imm12_10to5 = extract_funct7(instr)
        let imm4to1_11 = extract_rd(instr)
        
        //printf("imm12_10to5 = %d\n", imm12_10to5)
        //printf("imm4to1_11 = %d\n", imm4to1_11)
        
        let bit4to1 = (imm4to1_11 and 0x1E) to Nat16
        let bit10to5 = (imm12_10to5 and 0x3F) to Nat16 << 5
        let bit11 = (imm4to1_11 and 0x1) to Nat16 << 11
        let bit12 = (imm12_10to5 and 0x40) to Nat16 << 6
        
        var bits := (bit12 or bit11 or bit10to5 or bit4to1)
        
        // распространяем знак, если он есть
        if (bits and (1 to Nat16 << 12)) != 0 {
            bits := 0xF000 or bits
        }
        
        let imm = bits to Int16
        
        if funct3 == 0 {
            //beq
            printf("beq x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] == core.reg[rs2] {
                core.ip := (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step := false
            }

        } else if funct3 == 1 {
            //bne
            printf("bne x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] != core.reg[rs2] {
                core.ip := (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step := false
            }

        } else if funct3 == 4 {
            //blt
            printf("blt x%d, x%d, %d\n", rs1, rs2, imm to Int32)
			//printf("{%d} < {%d}\n", core.reg[rs1], core.reg[rs2])
            if core.reg[rs1] < core.reg[rs2] {
                core.ip := (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step := false
            }
			
			/*if cnt > 5 {
				printf("EXIT")
				return false
			}
			cnt := cnt + 1*/
			
        } else if funct3 == 5 {
            //bge
            printf("bge x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] >= core.reg[rs2] {
                core.ip := (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step := false
            }

        } else if funct3 == 6 {
            //bltu
            printf("bltu x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] to Nat32 < core.reg[rs2] to Nat32 {
                core.ip := (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step := false
            }

        } else if funct3 == 7 {
            //bgeu
            printf("bgeu x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] to Nat32 >= core.reg[rs2] to Nat32 {
                core.ip := (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step := false
            }
        }

    } else if op == OP_L {
        let imm = extract_imm12(instr)  to Int32
        
        let adr = (core.reg[rs1] + imm) to Nat32
		
		//printf("L adr=%x\n", adr)
        
        if funct3 == 0 {
            // lb
            printf("lb x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read8(adr) to Int32
            core.reg[rd] := val
            
        } else if funct3 == 1 {
            // lh
            printf("lh x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read16(adr) to Int32
            core.reg[rd] := val
            
        } else if funct3 == 2 {
            // lw
            printf("lw x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read32(adr) to Int32
			//printf("LW_VAL = %x\n", val)
            core.reg[rd] := val
            
        } else if funct3 == 4 {
            // lbu
            printf("lbu x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read8(adr) to Nat32 to Int32
            core.reg[rd] := val
        } else if funct3 == 5 {
            // lhu
            printf("lhu x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read16(adr) to Nat32 to Int32
            core.reg[rd] := val
        }
        
    } else if op == OP_S {   
        let imm4to0 = rd
        let imm11to5 = extract_funct7(instr)
        
		let i = (imm11to5 to Nat16 << 5) or (imm4to0 to Nat16)
		let imm = expand12(i) to Int32
        
        let adr = (core.reg[rs1] + imm) to Nat32
        let val = core.reg[rs2]
		
		//printf("S adr=%x, val=%x\n", adr, val)
        
        if funct3 == 0 {
            // sb
            printf("sb x%d, %d(x%d)\n", rs2, imm, rs1)
            core.memctl.write8(adr, val to Nat8)
        } else if funct3 == 1 {
            // sh
            printf("sh x%d, %d(x%d)\n", rs2, imm, rs1)
            core.memctl.write16(adr, val to Nat16)
        } else if funct3 == 2 {
            // sw
            printf("sw x%d, %d(x%d)\n", rs2, imm, rs1)
            core.memctl.write32(adr, val to Nat32)
        }
        
    } else if instr == OP_ECALL {
        printf("ECALL\n")
    } else if instr == OP_EBREAK {
        printf("EBREAK\n")
        return false
    } else if instr == OP_PAUSE {
        printf("PAUSE\n")
    } else if instr == OP_STOP {
        printf("\n\n* * * STOP\n")
        return false
    
    } else {
        printf("UNKNOWN OPCODE: %08X\n", op)
    }
    
    if core.need_step {
        core.ip := core.ip + 4
    } else {
        core.need_step := true
    }
    
    return true
}


