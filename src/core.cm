@attribute("c-no-print")
import "libc/libc.hm"

@attribute("c-no-print")
import "libc/stdio.hm"

import "./core.hm"




func core_init(core: *Core, memctl: *MemoryInterface) {
    //memset(core, 0, sizeof(Core))
    *core = {}
    core.memctl = memctl
    core.need_step = true
}


func core_irq(core: *Core, irq: Nat32) {
    if core.interrupt == 0 {
        core.interrupt = irq
    }
}



func expand12(val_12bit: Nat32) -> Int32 {
    var v = val_12bit
    if (v and 0x800) != 0 {
        v = v or 0xFFFFF000
    }
    return v to Int32
}


func expand20(val_20bit: Nat32) -> Int32 {
    var v = val_20bit
    if (v and 0x80000) != 0 {
        v = v or 0xFFF00000
    }
    return v to Int32
}




func extract_op(instr: Nat32) -> Nat8 {
    return (instr and 0x7F) to Nat8
}


func extract_funct3(instr: Nat32) -> Nat8 {
    return ((instr >> 12) and 0x07) to Nat8
}


func extract_rd(instr: Nat32) -> Nat8 {
    return ((instr >> 7) and 0x1F) to Nat8
}


func extract_rs1(instr: Nat32) -> Nat8 {
    return ((instr >> 15) and 0x1F) to Nat8
}


func extract_rs2(instr: Nat32) -> Nat8 {
    return ((instr >> 20) and 0x1F) to Nat8
}


func extract_funct7(instr: Nat32) -> Nat8 {
    return ((instr >> 25) and 0x7F) to Nat8
}


func extract_imm12(instr: Nat32) -> Nat32 {
    return (instr >> 20) and 0xFFF
}


func extract_imm31_12(instr: Nat32) -> Nat32 {
    return (instr >> 12) and 0xFFFFF
}


func extract_jal_imm(instr: Nat32) -> Nat32 {
    let imm = extract_imm31_12(instr)
    let bit19to12_msk = ((imm >> 0) and 0xFF) << 12
    let bit11_msk = ((imm >> 8) and 0x1) << 11
    let bit10to1 = ((imm >> 9) and 0x3FF) << 1
    let bit20_msk = ((imm >> 20) and 0x1) << 20
    return bit20_msk or bit19to12_msk or bit11_msk or bit10to1
}




func i_type_op(core: *Core, instr: Nat32) {
    let funct3 = extract_funct3(instr)
    let funct7 = extract_funct7(instr)
    let imm12 = extract_imm12(instr)
    let imm = expand12(imm12)
    let rd = extract_rd(instr)
    let rs1 = extract_rs1(instr)

    
    if rd == 0 {return}

    
    if funct3 == 0 {
        //printf("addi x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = core.reg[rs1] + imm
        }
    } else if (funct3 == 1) and (funct7 == 0) {
        /* SLLI is a logical left shift (zeros are shifted
        into the lower bits); SRLI is a logical right shift (zeros are shifted into the upper bits); and SRAI
        is an arithmetic right shift (the original sign bit is copied into the vacated upper bits). */
        //printf("slli x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = (core.reg[rs1] to Nat32 << imm) to Int32
        }

    } else if funct3 == 2 {
        // SLTI - set [1 to rd if rs1] less than immediate
        //printf("slti x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = (core.reg[rs1] < imm) to Int32
        }

    } else if funct3 == 3 {
        //printf("sltiu x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = (core.reg[rs1] to Nat32 < imm to Nat32) to Int32
        }

    } else if funct3 == 4 {
        //printf("xori x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = core.reg[rs1] xor imm
        }
    } else if (funct3 == 5) and (funct7 == 0) {
        //printf("srli x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = (core.reg[rs1] to Nat32 >> imm) to Int32
        }
    } else if (funct3 == 5) and (funct7 == 0x20) {
        //printf("srai x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = core.reg[rs1] >> imm
        }

    } else if funct3 == 6 {
        //printf("ori x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = core.reg[rs1] or imm
        }

    } else if funct3 == 7 {
        //printf("andi x%d, x%d, %d\n", rd, rs1, imm)
        if rd != 0 {
            core.reg[rd] = core.reg[rs1] and imm
        }
    }
}


func r_type_op(core: *Core, instr: Nat32) {
    let funct3 = extract_funct3(instr)
    let funct7 = extract_funct7(instr)
    let imm = expand12(extract_imm12(instr))
    let rd = extract_rd(instr)
    let rs1 = extract_rs1(instr)
    let rs2 = extract_rs2(instr)

    if rd == 0 {return}
    
    let v1 = core.reg[rs1]
    let v2 = core.reg[rs2]
    
    if funct3 == 0 and funct7 == 0x00 {
        //printf("add x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 + v2
    } else if funct3 == 0 and funct7 == 0x20 {
        //printf("sub x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 - v2
    } else if funct3 == 1 {
        // shift left logical
        //printf("sll x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 << v2
    } else if funct3 == 2 {
        // set less than
        //printf("slt x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = (v1 < v2) to Int32
    } else if funct3 == 3 {
        // set less than unsigned
        //printf("sltu x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = (v1 to Nat32 < v2 to Nat32) to Int32
    } else if funct3 == 4 {
        //printf("xor x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 xor v2
    } else if funct3 == 5 and funct7 == 0 {
        // shift right logical
        //printf("srl x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = (v1 to Nat32 >> v2) to Int32
    } else if funct3 == 5 and funct7 == 0x20 {
        // shift right arithmetical
        //printf("sra x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 >> v2
    } else if funct3 == 6 {
        //printf("or x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 or v2
    } else if funct3 == 7 {
        //printf("and x%d, x%d, x%d\n", rd, rs1, rs2)
        core.reg[rd] = v1 and v2
    }
}



func riscv_csr_rw(core: *Core, csr: Nat16, rd: Nat8, rs1: Nat8) {
    let nv = core.reg[rs1]
    if csr == 0x340 {
        // mscratch
    } else if csr == 0x341 {
        // mepc
    } else if csr == 0x342 {
        // mcause
    } else if csr == 0x343 {
        // mbadaddr
    } else if csr == 0x344 {
        // mip (machine interrupt pending)
    } 
}

func riscv_csr_rs(core: *Core, csr: Nat8, rd: Nat8, rs1: Nat8) {}
func riscv_csr_rc(core: *Core, csr: Nat8, rd: Nat8, rs1: Nat8) {}



func core_tick(core: *Core) -> Bool {

    if core.interrupt > 0 {
        //printf("\nINT #%02X\n", core.interrupt)
        let vect_offset = core.interrupt * 4
        core.ip = vect_offset
        core.interrupt = 0
    }

    // instruction fetch
    let instr = core.memctl.read32(core.ip)

    core.cnt = core.cnt + 1

    // assert
    if core.reg[0] != 0 {
        printf("FATAL: x0 != 0!\n")
        exit(1)
    }

    //printf("X8 = %x\n", core.reg[8]);

    //let b3 = ((instr >> 24) to Nat8) and 0xFF
    //let b2 = ((instr >> 16) to Nat8) and 0xFF
    //let b1 = ((instr >> 8) to Nat8) and 0xFF
    //let b0 = ((instr >> 0) to Nat8) and 0xFF
//    //printf("[%04x] %02x%02x%02x%02x ", core.ip, b0 to Nat32, b1 to Nat32, b2 to Nat32, b3 to Nat32)
    let op = extract_op(instr)
    let rd = extract_rd(instr)
    let rs1 = extract_rs1(instr)
    let rs2 = extract_rs2(instr)
    let funct3 = extract_funct3(instr)
    
    if false {
        //printf("INSTR = 0x%x\n", instr)
        //printf("OP = 0x%x\n", op)
    }
    
    if op == OP_I {
        i_type_op(core, instr)
        
    } else if op == OP_R {
        r_type_op(core, instr)
    
    } else if op == OP_LUI {
        // U-type
        let imm = expand12(extract_imm31_12(instr))
        //printf("lui x%d, 0x%X\n", rd, imm)
        core.reg[rd] = imm << 12

    } else if op == OP_AUI_PC {
        // U-type
        let imm = expand12(extract_imm31_12(instr))
        let x = (core.ip to Int32) + (imm << 12)
        core.reg[rd] = x
        //printf("auipc x%d, 0x%X\n", rd, imm)

    } else if op == OP_JAL {
        // U-type
        let raw_imm = extract_jal_imm(instr)
        let imm = expand20(raw_imm)

        //printf("jal x%d, %d\n", rd, imm)
        if rd != 0 {
            core.reg[rd] = (core.ip + 4) to Int32
        }

        core.ip = (core.ip to Int32 + imm) to Nat32
        core.need_step = false

    } else if op == OP_JALR and funct3 == 0 {
        let imm = expand12(extract_imm12(instr))
        //printf("jalr %d(x%d)\n", imm, rs1)
        // rd <- pc + 4
        // pc <- (rs1 + imm) & ~1

        let next_instr_ptr = (core.ip + 4) to Int32
        let jump_to = (core.reg[rs1] + imm) to Nat32 and 0xFFFFFFFE

        if rd != 0 {
            core.reg[rd] = next_instr_ptr
        }

        core.ip = jump_to

        core.need_step = false

    } else if op == OP_B {
        let imm12_10to5 = extract_funct7(instr)
        let imm4to1_11 = extract_rd(instr)

        let bit4to1 = (imm4to1_11 and 0x1E) to Nat16
        let bit10to5 = (imm12_10to5 and 0x3F) to Nat16 << 5
        let bit11 = (imm4to1_11 and 0x1) to Nat16 << 11
        let bit12 = (imm12_10to5 and 0x40) to Nat16 << 6
        
        var bits = (bit12 or bit11 or bit10to5 or bit4to1)
        
        // распространяем знак, если он есть
        if (bits and (1 to Nat16 << 12)) != 0 {
            bits = 0xF000 or bits
        }
        
        let imm = bits to Int16
        
        if funct3 == 0 {
            //beq
            //printf("beq x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] == core.reg[rs2] {
                core.ip = (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step = false
            }

        } else if funct3 == 1 {
            //bne
            //printf("bne x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] != core.reg[rs2] {
                core.ip = (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step = false
            }

        } else if funct3 == 4 {
            //blt
            //printf("blt x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] < core.reg[rs2] {
                core.ip = (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step = false
            }

        } else if funct3 == 5 {
            //bge
            //printf("bge x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] >= core.reg[rs2] {
                core.ip = (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step = false
            }

        } else if funct3 == 6 {
            //bltu
            //printf("bltu x%d, x%d, %d\n", rs1, rs2, imm to Int32)
            if core.reg[rs1] to Nat32 < core.reg[rs2] to Nat32 {
                core.ip = (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step = false
            }

        } else if funct3 == 7 {
            //bgeu
            //printf("bgeu x%d, x%d, %d\n", rs1, rs2, imm to Int32)

            if core.reg[rs1] to Nat32 >= core.reg[rs2] to Nat32 {
                core.ip = (core.ip to Int32 + imm to Int32) to Nat32
                core.need_step = false
            } else {
            }
        }

    } else if op == OP_L {
        let imm = expand12(extract_imm12(instr))

        let adr = (core.reg[rs1] + imm) to Nat32

        if funct3 == 0 {
            // lb
            //printf("lb x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read8(adr) to Int32
            if rd != 0 {
                core.reg[rd] = val
            }
        } else if funct3 == 1 {
            // lh
            //printf("lh x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read16(adr) to Int32
            if rd != 0 {
                core.reg[rd] = val
            }
        } else if funct3 == 2 {
            // lw
            //printf("lw x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read32(adr) to Int32
            //printf("LW [0x%x] (0x%x)\n", adr, val)
            if rd != 0 {
                core.reg[rd] = val
            }
        } else if funct3 == 4 {
            // lbu
            //printf("lbu x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read8(adr) to Nat32 to Int32
            //printf("LBU[0x%x] (0x%x)\n", adr, val)
            if rd != 0 {
                core.reg[rd] = val
            }
        } else if funct3 == 5 {
            // lhu
            //printf("lhu x%d, %d(x%d)\n", rd, imm, rs1)
            let val = core.memctl.read16(adr) to Nat32 to Int32
            if rd != 0 {
                core.reg[rd] = val
            }
        }

    } else if op == OP_S {   
        let imm4to0 = rd
        let imm11to5 = extract_funct7(instr)
        
        let i = (imm11to5 to Nat32 << 5) or (imm4to0 to Nat32)
        let imm = expand12(i)
        
        let adr = (core.reg[rs1] + imm) to Nat32
        let val = core.reg[rs2]
        
        if funct3 == 0 {
            // sb
            //printf("sb x%d, %d(x%d)\n", rs2, imm, rs1)
            core.memctl.write8(adr, val to Nat8)
        } else if funct3 == 1 {
            // sh
            //printf("sh x%d, %d(x%d)\n", rs2, imm, rs1)
            core.memctl.write16(adr, val to Nat16)
        } else if funct3 == 2 {
            // sw
            //printf("sw x%d, %d(x%d)\n", rs2, imm, rs1)
            core.memctl.write32(adr, val to Nat32)
        }
    
    } else if op == OP_SYSTEM {
        if instr == INSTR_ECALL {
            printf("ECALL\n")
            core_irq(core, INT_SYS_CALL)
            
        } else if instr == INSTR_EBREAK {
            printf("EBREAK\n")
            return false
        
        // CSR instructions
        } else if funct3 == FUNCT3_CSRRW {
            //riscv_csr_rw(core, csr, rd, rs1)
        } else if funct3 == FUNCT3_CSRRS {
            //riscv_csr_rs(core, csr, rd, rs1)
        } else if funct3 == FUNCT3_CSRRC {
            //riscv_csr_rc(core, csr, rd, rs1)
        
        } else if funct3 == FUNCT3_CSRRWI {
        } else if funct3 == FUNCT3_CSRRSI {
        } else if funct3 == FUNCT3_CSRRCI {
        
        } else {
            printf("UNKNOWN SYSTEM INSTRUCTION: 0x%x\n", instr)
            printf("funct3 = %x\n", funct3)
            return false
        }

    } else if op == OP_FENCE {
        if instr == INSTR_PAUSE {
            //printf("PAUSE\n")
        }
    } else {
        //printf("UNKNOWN OPCODE: %08X\n", op)
    }
    
    if core.need_step {
        core.ip = core.ip + 4
    } else {
        core.need_step = true
    }
    
    return true
}

