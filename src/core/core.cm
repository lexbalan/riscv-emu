
import "libc/libc"
import "libc/stdio"

import "decode"
import "csr"
import "core"


func core_init(core: *Core, memctl: *MemoryInterface) {
	*core = Core {
		memctl = memctl
		need_step = true
	}
}


func op_i(core: *Core, instr: Nat32)
func op_r(core: *Core, instr: Nat32)
func op_lui(core: *Core, instr: Nat32)
func op_auipc(core: *Core, instr: Nat32)
func op_jal(core: *Core, instr: Nat32)
func op_jalr(core: *Core, instr: Nat32)
func op_b(core: *Core, instr: Nat32)
func op_l(core: *Core, instr: Nat32)
func op_s(core: *Core, instr: Nat32)
func op_system(core: *Core, instr: Nat32)
func op_fence(core: *Core, instr: Nat32)


func fetch(core: *Core) -> Nat32 {
	return core.memctl.read32(core.pc)
}


func core_tick(core: *Core) {

	if core.interrupt > 0 {
		//printf("\nINT #%02X\n", core.interrupt)
		let vect_offset = core.interrupt * 4
		core.pc = vect_offset
		core.interrupt = 0
	}

	let instr = fetch(core)
	let op = extract_op(instr)
	let funct3 = extract_funct3(instr)

	if op == opI {
		op_i(core, instr)
	} else if op == opR {
		op_r(core, instr)
	} else if op == opLUI {
		op_lui(core, instr)
	} else if op == opAUIPC {
		op_auipc(core, instr)
	} else if op == opJAL {
		op_jal(core, instr)
	} else if op == opJALR and funct3 == 0 {
		op_jalr(core, instr)
	} else if op == opB {
		op_b(core, instr)
	} else if op == opL {
		op_l(core, instr)
	} else if op == opS {
		op_s(core, instr)
	} else if op == opSYSTEM {
		op_system(core, instr)
	} else if op == opFENCE {
		op_fence(core, instr)
	} else {
		//printf("UNKNOWN OPCODE: %08X\n", op)
	}

	++core.cnt

	if core.need_step {
		core.pc = core.pc + 4
	} else {
		core.need_step = true
	}
}



func op_i(core: *Core, instr: Nat32) {
	let funct3 = extract_funct3(instr)
	let funct7 = extract_funct7(instr)
	let imm12 = extract_imm12(instr)
	let imm = expand12(imm12)
	let rd = extract_rd(instr)
	let rs1 = extract_rs1(instr)

	if rd == 0 {return}

	if funct3 == 0 {
		//printf("addi x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = core.reg[rs1] + imm
	} else if funct3 == 1 and funct7 == 0 {
		/* SLLI is a logical left shift (zeros are shifted
		into the lower bits); SRLI is a logical right shift (zeros are shifted into the upper bits); and SRAI
		is an arithmetic right shift (the original sign bit is copied into the vacated upper bits). */
		//printf("slli x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = Int32 (Nat32 core.reg[rs1] << imm)
	} else if funct3 == 2 {
		// SLTI - set [1 to rd if rs1] less than immediate
		//printf("slti x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = Int32 (core.reg[rs1] < imm)
	} else if funct3 == 3 {
		//printf("sltiu x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = Int32 (Nat32 core.reg[rs1] < Nat32 imm)
	} else if funct3 == 4 {
		//printf("xori x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = core.reg[rs1] xor imm
	} else if funct3 == 5 and funct7 == 0 {
		//printf("srli x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = Int32 (Nat32 core.reg[rs1] >> imm)
	} else if funct3 == 5 and funct7 == 0x20 {
		//printf("srai x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = core.reg[rs1] >> imm
	} else if funct3 == 6 {
		//printf("ori x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = core.reg[rs1] or imm
	} else if funct3 == 7 {
		//printf("andi x%d, x%d, %d\n", rd, rs1, imm)
		core.reg[rd] = core.reg[rs1] and imm
	}
}


func op_r(core: *Core, instr: Nat32) {
	let funct3 = extract_funct3(instr)
	let funct7 = extract_funct7(instr)
	let imm = expand12(extract_imm12(instr))
	let rd = extract_rd(instr)
	let rs1 = extract_rs1(instr)
	let rs2 = extract_rs2(instr)

	if rd == 0 {return}

	let v1 = core.reg[rs1]
	let v2 = core.reg[rs2]

	if funct3 == 0 and funct7 == 0x00 {
		//printf("add x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 + v2
	} else if funct3 == 0 and funct7 == 0x20 {
		//printf("sub x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 - v2
	} else if funct3 == 1 {
		// shift left logical
		//printf("sll x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 << v2
	} else if funct3 == 2 {
		// set less than
		//printf("slt x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = Int32 (v1 < v2)
	} else if funct3 == 3 {
		// set less than unsigned
		//printf("sltu x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = Int32 (Nat32 v1 < Nat32 v2)
	} else if funct3 == 4 {
		//printf("xor x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 xor v2
	} else if funct3 == 5 and funct7 == 0 {
		// shift right logical
		//printf("srl x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = Int32 (Nat32 v1 >> v2)
	} else if funct3 == 5 and funct7 == 0x20 {
		// shift right arithmetical
		//printf("sra x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 >> v2
	} else if funct3 == 6 {
		//printf("or x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 or v2
	} else if funct3 == 7 {
		//printf("and x%d, x%d, x%d\n", rd, rs1, rs2)
		core.reg[rd] = v1 and v2
	}
}


func op_lui(core: *Core, instr: Nat32) {
	// U-type
	let imm = expand12(extract_imm31_12(instr))
	let rd = extract_rd(instr)
	//printf("lui x%d, 0x%X\n", rd, imm)
	if rd == 0 {return}
	core.reg[rd] = imm << 12
}


func op_auipc(core: *Core, instr: Nat32) {
	// U-type
	let imm = expand12(extract_imm31_12(instr))
	let x = Int32 core.pc + (imm << 12)
	let rd = extract_rd(instr)
	//printf("auipc x%d, 0x%X\n", rd, imm)
	if rd == 0 {return}
	core.reg[rd] = x
}


func op_jal(core: *Core, instr: Nat32) {
	// U-type
	let rd = extract_rd(instr)
	let raw_imm = extract_jal_imm(instr)
	let imm = expand20(raw_imm)
	//printf("jal x%d, %d\n", rd, imm)

	if rd != 0 {
		core.reg[rd] = Int32 (core.pc + 4)
	}

	core.pc = Nat32 (Int32 core.pc + imm)
	core.need_step = false
}


func op_jalr(core: *Core, instr: Nat32) {
	let rs1 = extract_rs1(instr)
	let rd = extract_rd(instr)
	let imm = expand12(extract_imm12(instr))
	//printf("jalr %d(x%d)\n", imm, rs1)
	// rd <- pc + 4
	// pc <- (rs1 + imm) & ~1

	let next_instr_ptr = Int32 (core.pc + 4)
	let jump_to = Nat32 (core.reg[rs1] + imm) and 0xFFFFFFFE

	if rd != 0 {
		core.reg[rd] = next_instr_ptr
	}

	core.pc = jump_to

	core.need_step = false
}


func op_b(core: *Core, instr: Nat32) {
	let funct3 = extract_funct3(instr)
	let imm12_10to5 = extract_funct7(instr)
	let imm4to1_11 = extract_rd(instr)
	let rs1 = extract_rs1(instr)
	let rs2 = extract_rs2(instr)

	let bit4to1 = Nat16 (imm4to1_11 and 0x1E)
	let bit10to5 = Nat16 (imm12_10to5 and 0x3F) << 5
	let bit11 = Nat16 (imm4to1_11 and 0x1) << 11
	let bit12 = Nat16 (imm12_10to5 and 0x40) << 6

	var bits = (bit12 or bit11 or bit10to5 or bit4to1)

	// распространяем знак, если он есть
	if (bits and (Nat16 1 << 12)) != 0 {
		bits = 0xF000 or bits
	}

	let imm = Int16 bits

	if funct3 == 0 {
		//beq
		//printf("beq x%d, x%d, %d\n", rs1, rs2, imm to Int32)
		if core.reg[rs1] == core.reg[rs2] {
			core.pc = Nat32 (Int32 core.pc + Int32 imm)
			core.need_step = false
		}

	} else if funct3 == 1 {
		//bne
		//printf("bne x%d, x%d, %d\n", rs1, rs2, imm to Int32)
		if core.reg[rs1] != core.reg[rs2] {
			core.pc = Nat32 (Int32 core.pc + Int32 imm)
			core.need_step = false
		}

	} else if funct3 == 4 {
		//blt
		//printf("blt x%d, x%d, %d\n", rs1, rs2, imm to Int32)
		if core.reg[rs1] < core.reg[rs2] {
			core.pc = Nat32 (Int32 core.pc + Int32 imm)
			core.need_step = false
		}

	} else if funct3 == 5 {
		//bge
		//printf("bge x%d, x%d, %d\n", rs1, rs2, imm to Int32)
		if core.reg[rs1] >= core.reg[rs2] {
			core.pc = Nat32 (Int32 core.pc + Int32 imm)
			core.need_step = false
		}

	} else if funct3 == 6 {
		//bltu
		//printf("bltu x%d, x%d, %d\n", rs1, rs2, imm to Int32)
		if Nat32 core.reg[rs1] < Nat32 core.reg[rs2] {
			core.pc = Nat32 (Int32 core.pc + Int32 imm)
			core.need_step = false
		}

	} else if funct3 == 7 {
		//bgeu
		//printf("bgeu x%d, x%d, %d\n", rs1, rs2, imm to Int32)

		if Nat32 core.reg[rs1] >= Nat32 core.reg[rs2] {
			core.pc = Nat32 (Int32 core.pc + Int32 imm)
			core.need_step = false
		}
	}
}


func op_l(core: *Core, instr: Nat32) {
	let funct3 = extract_funct3(instr)
	let funct7 = extract_funct7(instr)
	let imm12 = extract_imm12(instr)
	let imm = expand12(imm12)
	let rd = extract_rd(instr)
	let rs1 = extract_rs1(instr)
	let rs2 = extract_rs2(instr)

	let adr = Nat32 (core.reg[rs1] + imm)

	if funct3 == 0 {
		// lb
		//printf("lb x%d, %d(x%d)\n", rd, imm, rs1)
		let val = core.memctl.read8(adr)
		if rd != 0 {
			core.reg[rd] = Int32 val
		}
	} else if funct3 == 1 {
		// lh
		//printf("lh x%d, %d(x%d)\n", rd, imm, rs1)
		let val = core.memctl.read16(adr)
		if rd != 0 {
			core.reg[rd] = Int32 val
		}
	} else if funct3 == 2 {
		// lw
		//printf("lw x%d, %d(x%d)\n", rd, imm, rs1)
		let val = core.memctl.read32(adr)
		//printf("LW [0x%x] (0x%x)\n", adr, val)
		if rd != 0 {
			core.reg[rd] = Int32 val
		}
	} else if funct3 == 4 {
		// lbu
		//printf("lbu x%d, %d(x%d)\n", rd, imm, rs1)
		let val = Nat32 core.memctl.read8(adr)
		//printf("LBU[0x%x] (0x%x)\n", adr, val)
		if rd != 0 {
			core.reg[rd] = Int32 val
		}
	} else if funct3 == 5 {
		// lhu
		//printf("lhu x%d, %d(x%d)\n", rd, imm, rs1)
		let val = Nat32 core.memctl.read16(adr)
		if rd != 0 {
			core.reg[rd] = Int32 val
		}
	}
}


func op_s(core: *Core, instr: Nat32) {
	let funct3 = extract_funct3(instr)
	let funct7 = extract_funct7(instr)
	let rd = extract_rd(instr)
	let rs1 = extract_rs1(instr)
	let rs2 = extract_rs2(instr)

	let imm4to0 = Nat32 rd
	let imm11to5 = Nat32 funct7
	let _imm = (imm11to5 << 5) or imm4to0
	let imm = expand12(_imm)

	let adr = Nat32 (core.reg[rs1] + imm)
	let val = core.reg[rs2]

	if funct3 == 0 {
		// sb
		//printf("sb x%d, %d(x%d)\n", rs2, imm, rs1)
		core.memctl.write8(adr, Nat8 val)
	} else if funct3 == 1 {
		// sh
		//printf("sh x%d, %d(x%d)\n", rs2, imm, rs1)
		core.memctl.write16(adr, Nat16 val)
	} else if funct3 == 2 {
		// sw
		//printf("sw x%d, %d(x%d)\n", rs2, imm, rs1)
		core.memctl.write32(adr, Nat32 val)
	}
}


func op_system(core: *Core, instr: Nat32) {
	let funct3 = extract_funct3(instr)
	let funct7 = extract_funct7(instr)
	let imm12 = extract_imm12(instr)
	let imm = expand12(imm12)
	let rd = extract_rd(instr)
	let rs1 = extract_rs1(instr)

	let csr = Nat16 imm12

	if instr == instrECALL {
		printf("ECALL\n")
		core_irq(core, intSysCall)

	} else if instr == instrEBREAK {
		printf("EBREAK\n")
		core.end = true

	// CSR instructions
	} else if funct3 == funct3_CSRRW {
		csr_rw(core, csr, rd, rs1)
	} else if funct3 == funct3_CSRRS {
		csr_rs(core, csr, rd, rs1)
	} else if funct3 == funct3_CSRRC {
		csr_rc(core, csr, rd, rs1)
	} else if funct3 == funct3_CSRRWI {
		let imm = rs1
		csr_rwi(core, csr, rd, imm)
	} else if funct3 == funct3_CSRRSI {
		let imm = rs1
		csr_rsi(core, csr, rd, imm)
	} else if funct3 == funct3_CSRRCI {
		let imm = rs1
		csr_rci(core, csr, rd, imm)
	} else {
		printf("UNKNOWN SYSTEM INSTRUCTION: 0x%x\n", instr)
		printf("funct3 = %x\n", funct3)
		core.end = true
	}
}


func op_fence(core: *Core, instr: Nat32) {
	if instr == instrPAUSE {
		//printf("PAUSE\n")
	}
}


func core_irq(core: *Core, irq: Nat32) {
	if core.interrupt == 0 {
		core.interrupt = irq
	}
}

