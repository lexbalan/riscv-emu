// CSR's
//https://five-embeddev.com/riscv-isa-manual/latest/priv-csrs.html


let nRegs = 32


type BusInterface record {
	read8: *(adr: Nat32) -> Nat8
	read16: *(adr: Nat32) -> Nat16
	read32: *(adr: Nat32) -> Nat32

	write8: *(adr: Nat32, value: Nat8) -> Unit
	write16: *(adr: Nat32, value: Nat16) -> Unit
	write32: *(adr: Nat32, value: Nat32) -> Unit
}

type Core record {
	reg: [nRegs]Int32
	pc: Nat32

	bus: *BusInterface

	need_step: Bool
	end: Bool

	interrupt: Nat32
	cnt: Nat32
}


let opL = 0x03  // load
let opI = 0x13  // immediate
let opS = 0x23  // store
let opR = 0x33  // reg
let opB = 0x63  // branch

let opLUI = 0x37	// load upper immediate
let opAUIPC = 0x17  // add upper immediate to PC
let opJAL = 0x6F	// jump and link
let opJALR = 0x67   // jump and link by register

let opSYSTEM = 0x73
let opFENCE = 0x0F


let instrECALL = opSYSTEM or 0x00000000
let instrEBREAK = opSYSTEM or 0x00100000
let instrPAUSE = opFENCE or 0x01000000


// funct3 for CSR
let funct3_CSRRW = 1
let funct3_CSRRS = 2
let funct3_CSRRC = 3
let funct3_CSRRWI = 4
let funct3_CSRRSI = 5
let funct3_CSRRCI = 6


let intSysCall = 0x08
let intMemViolation = 0x0B


func core_init(core: *Core, bus: *BusInterface)
func core_tick(core: *Core)

func core_irq(core: *Core, irq: Nat32)

