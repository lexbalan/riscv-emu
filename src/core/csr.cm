//
// RISC-V CSR (Control & Status Registers)
//

import "core"
import "csr"


// for more information see:
// https://five-embeddev.com/riscv-user-isa-manual/Priv-v1.12/csr.html


/*
The CSRRW (Atomic Read/Write CSR) instruction atomically swaps values in the CSRs and integer registers. CSRRW reads the old value of the CSR, zero-extends the value to XLEN bits, then writes it to integer register rd. The initial value in rs1 is written to the CSR. If rd=x0, then the instruction shall not read the CSR and shall not cause any of the side effects that might occur on a CSR read.
*/
func csr_rw(core: *Core, csr: Nat16, rd: Nat8, rs1: Nat8) {
	let nv = core.reg[rs1]
	if csr == 0x340 {
		// mscratch
	} else if csr == 0x341 {
		// mepc
	} else if csr == 0x342 {
		// mcause
	} else if csr == 0x343 {
		// mbadaddr
	} else if csr == 0x344 {
		// mip (machine interrupt pending)
	}
}


/*
The CSRRS (Atomic Read and Set Bits in CSR) instruction reads the value of the CSR, zero-extends the value to XLEN bits, and writes it to integer register rd. The initial value in integer register rs1 is treated as a bit mask that specifies bit positions to be set in the CSR. Any bit that is high in rs1 will cause the corresponding bit to be set in the CSR, if that CSR bit is writable. Other bits in the CSR are not explicitly written.
*/
func csr_rs(core: *Core, csr: Nat16, rd: Nat8, rs1: Nat8) {
	//TODO
}

/*
The CSRRC (Atomic Read and Clear Bits in CSR) instruction reads the value of the CSR, zero-extends the value to XLEN bits, and writes it to integer register rd. The initial value in integer register rs1 is treated as a bit mask that specifies bit positions to be cleared in the CSR. Any bit that is high in rs1 will cause the corresponding bit to be cleared in the CSR, if that CSR bit is writable. Other bits in the CSR are not explicitly written.
*/
func csr_rc(core: *Core, csr: Nat16, rd: Nat8, rs1: Nat8) {
	//TODO
}


//


func csr_rwi(core: *Core, csr: Nat16, rd: Nat8, imm: Nat8) {
	//TODO
}


// read+clear immediate(5-bit)
func csr_rsi(core: *Core, csr: Nat16, rd: Nat8, imm: Nat8) {
	//TODO
}


// read+clear immediate(5-bit)
func csr_rci(core: *Core, csr: Nat16, rd: Nat8, imm: Nat8) {
	//TODO
}


