
import "libc/libc"
import "libc/stdio"

import "mem"
import "core/core"


let text_filename = "./image.bin"

let showText = false


var memctl: MemoryInterface
var core: Core


let textBufferSize = 4096
var text: [textBufferSize]Nat32


func loader(filename: *Str8, bufptr: *[]Byte, buf_size: Nat32) -> Nat32 {
    printf("LOAD: %s\n", filename)

    let fp = fopen(filename, "rb")

    if fp == nil {
        printf("error: cannot open file '%s'", filename)
        return 0
    }
    
    let n = fread(bufptr, 1, SizeT buf_size, fp)

    printf("LOADED: %zu bytes\n", n)
    

	if showText {
		var i = SizeT 0
		while i < (n / 4) {
			printf("%08zx: 0x%08x\n", i, (*[]Nat32 bufptr)[i])
			i = i + 4
		}

		printf("-----------\n")
	}

    fclose(fp)
    
    return Nat32 n
}


func show_regs() {
	var i = 0
    while i < 16 {
        printf("x%02d = 0x%08x", i, core.reg[i])
		printf("    ")
		printf("x%02d = 0x%08x\n", i + 16, core.reg[i + 16])
        i = i + 1
    }
}


func show_mem() {
	var i = 0
	let ramptr = get_ram_ptr()
    while i < 256 {
		printf("%08X", i * 16)

		var j = 0
		while j < 16 {
			printf(" %02X", ramptr[i + j]);
			j = j + 1
		}

		printf("\n")

		i = i + 16
	}
}



func mem_violation_event(reason: Nat32) {
	core_irq(&core, intMemViolation)
}


func main() -> Int {
    printf("RISC-V VM\n")
    
    // memory controller initialize
    memctl.read8 = &vm_mem_read8
    memctl.read16 = &vm_mem_read16
    memctl.read32 = &vm_mem_read32

    memctl.write8 = &vm_mem_write8
    memctl.write16 = &vm_mem_write16
    memctl.write32 = &vm_mem_write32


	let romptr = get_rom_ptr()
	let loaded_bytes_text = loader(text_filename, romptr, romSize)

    core_init(&core, &memctl)

    printf("~~~ START ~~~\n")

    while not core.end {
        core_tick(&core)
    }

	printf("core.cnt = %u\n", core.cnt)

    printf("\nCore dump:\n")

	show_regs()
	show_mem()

    return 0
}

