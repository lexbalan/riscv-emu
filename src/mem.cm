//

@attribute("c-no-print")
import "libc/stdio.hm"


import "./mem.hm"


var rom: [ROM_SIZE]Nat8
var ram: [RAM_SIZE]Nat8

func get_ram_ptr() -> *[]Nat8 {
    return &ram
}

func get_rom_ptr() -> *[]Nat8 {
    return &rom
}

extern func exit(code: Int32)


func mem_violation(rw: Char8, adr: Nat32) {
	printf("MEMORY VIOLATION '%c' 0x%08x\n", rw, adr)
	exit(1)
}


func vm_mem_read8(adr: Nat32) -> Nat8 {
	if (adr >= RAM_START) and (adr <= RAM_END) {
        let p = &ram[adr - RAM_START] to Pointer to *Nat8
		printf(" L[0x%x]", adr)
		printf(" {0x%x}\n", *p to Nat32)
        return *p
    } else if (adr >= MMIO_START) and (adr <= MMIO_END) {
        return 0
	} else if (adr >= ROM_START) and (adr <= ROM_END) {
		let p = &rom[adr - ROM_START] to Pointer to *Nat8
		return *p
    } else {
        mem_violation("r"[0], adr)
    }
    
    return 0
}

func vm_mem_read16(adr: Nat32) -> Nat16 {
    if (adr >= RAM_START) and (adr <= RAM_END) {
        let p = &ram[adr - RAM_START] to Pointer to *Nat16
        return *p
    } else if (adr >= MMIO_START) and (adr <= MMIO_END) {
        return 0
	} else if (adr >= ROM_START) and (adr <= ROM_END) {
		let p = &rom[adr - ROM_START] to Pointer to *Nat16
		return *p
    } else {
        mem_violation("r"[0], adr)
    }
    
    return 0
}

func vm_mem_read32(adr: Nat32) -> Nat32 {
	if (adr >= ROM_START) and (adr <= ROM_END) {
		let p = &rom[adr - ROM_START] to Pointer to *Nat32
        return *p
	} else if (adr >= RAM_START) and (adr <= RAM_END) {
        let p = &ram[adr - RAM_START] to Pointer to *Nat32
        return *p
    } else if (adr >= MMIO_START) and (adr <= MMIO_END) {
        return 0
    } else {
        mem_violation("r"[0], adr)
    }
    
    return 0
}



func vm_mem_write8(adr: Nat32, value: Nat8) {
    if (adr >= RAM_START) and (adr <= RAM_END) {
        let p = &ram[adr - RAM_START] to Pointer to *Nat8
        *p := value
    } else if (adr >= MMIO_START) and (adr <= MMIO_END) {
        if adr == CONSOLE_PUT_ADR {
			let v = value to Int
			printf(" >> 0x%x <<\n", v)
            putchar(v)
            return
        }
    } else {
        mem_violation("w"[0], adr)
    }
}

func vm_mem_write16(adr: Nat32, value: Nat16) {
    if (adr >= RAM_START) and (adr <= RAM_END) {
        let p = &ram[adr - RAM_START] to Pointer to *Nat16
        *p := value
    } else if (adr >= MMIO_START) and (adr <= MMIO_END) {
        if adr == CONSOLE_PUT_ADR {
            putchar(value to Int)
            return
        }
    } else {
        mem_violation("w"[0], adr)
    }
}

func vm_mem_write32(adr: Nat32, value: Nat32) {
    if (adr >= RAM_START) and (adr <= RAM_END) {
        let p = &ram[adr - RAM_START] to Pointer to *Nat32
        *p := value
    } else if (adr >= MMIO_START) and (adr <= MMIO_END) {
        if adr == CONSOLE_PUT_ADR {
            putchar(value to Int)
            return
        }
    } else {
        mem_violation("w"[0], adr)
    }
}

